该文档记录了从2018-04-24后的每次commit都修改过哪些内容。
每次的commit都是以xx-xx-xx命名。

commit：1-0-0
time：2018-04-24
describe：
	1）修改了lowper_special模式连续两次重置就不能记忆ap信息的问题。
	2）增加了授权时烧入固件的代码。目前是4k一包，完成烧录需要将近15s（包括3s擦除）。
	3）为适配2功能，将tuya_uart.c的串口收缓存buf由静态改为动态申请，大小可在ty_uart_init 形参配置（注意：授权超时退出时要调用ty_uart_free释放缓存）。
	4）解决了在设备配上网之后拔掉外网之后的110s时间内局域网控制会阻塞的问题（原因：mqtt socket的keepalive时间是60+42s，另加一次间隔5s重试共107s，
	   在这107s时间内设备还是会将数据往mqtt socket发送，这就导致了底层阻塞。解决办法：tcp发送ack超时3次就关掉mqtt socket）。
	5）厂测线程在对一条命令接收次数超过15次就会丢掉该包，而厂测波特率是9600，命令0x07配置信息的包长度是118字节，15次会收不齐，这就导致了会出现pc端发出这条命令
	   之后，设备没返回的问题（将15次改成50次）。
	6）4问题是配上网之后一段时间（例如10s）才拔外网，而当配上网之后立即拔掉外网，又会出现阻塞的现象。原因是连上mqtt之后会产生一些http请求，在去连接socket时会发生阻塞，这就导致了msg
	   这个线程阻塞。而局域网收到控制命令也是通过msg来处理。还有另外一个原因就是下拉定时器任务是在定时器回调里直接发起HTTP请求，这也导致了定时器线程阻塞。
	   目前只改了下拉定时任务从timer改为tm_msg,这样每次拔掉外网只会阻塞将近20s左右。
	
commit：1-0-01
time：2018-06-20
describe：
	1）功耗问题第一版（待机状态50mA左右，断网状态下3s时间（扫描路由器）的120mA，其它时间32mA）。
	2）lowper模式下ap配网成功后会进入低功耗模式（原因是在ap配网成功后没有关掉3分钟检测tmm_msg）。
	3）解决了在器隐藏ssid之后模块扫描不到该ssid的问题。
	4）解决了ota过程当中不断插拔网线造成的联网状态不能恢复的问题：
		问题描述：a)在select机制：在send阻塞状态时，close socket不能让recv和send退出来。
				  b)用邮箱机制，在close时利用信号量机制，在recv退出来之后再让close继续执行del_conn的操作（此间还包括判断是否再send操作，并且如何让send退出来的机制）
				 
commit：1-0-02
time：2018-07-24
describe：
	1）功耗第一版。
	2）__free_all_del_thrd_node()调了两行代码的顺序，DeleteNode(tmp_node,node);Free(tmp_node);
	3）http加密：支持非加密数据解析，判断下行数据有无"e" = 1，有则是非加密数据，无则是加密数据。
	4）合入了mimo配网。
	5）flash问题：
		a）写flash异常断电会造成原有的key-value找不到，解决方法：每次写flash，index page用同一个，只修改value page。
		b）写flash会误将index page分配出去当value page（详看__sf_alloc_data_elem_by_le这个接口）。
	6）加了流服务（另外起了一路mqtt服务线程）。
	7)通用固件：
		a）合入了MCU升级，边下载边通过串口传输给MCU（原先做法：全部下下来到flash，做md5校验，再传给MCU，但是由于这个做法和底层上报进度的机制冲突（会造成app界面超时））。
		b）修复了raw类型上报超时问题（ms和s的误区）。
		c）增加了流服务、启停心跳、wifi信号查询命令。
	8）rtk底层合入了配网优化和mimo的patch。
	9）在gw_cntl_init掉用之前重置设备，会造成线程阻塞，解决方法：添加保护，gw_cntl_init调用之前重置不予响应。	
	10）wifi适配层：wifi扫描换了个接口、wifi扫描和设置工作模式加了互斥锁。
	11）tuya_key.c: 一次有效的按键增加了检测按下的动作（应用层不用做去抖操作）。

